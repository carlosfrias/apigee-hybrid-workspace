---
# tasks file for gcp_project_create
- name: Assert ADMIN_ACCOUNT_EMAIL
  assert:
    that:
      - ADMIN_ACCOUNT_EMAIL is defined
    msg: "ADMIN_ACCOUNT_EMAIL must contain the GCP account email"

- name: Assert PROJECT_ID
  assert:
    that:
      - PROJECT_ID is defined
    msg: "PROJECT_ID must be provided."

- name: Advise status BILLING_ID
  pause:
    echo: "Please note that BILLING_ID has not been provided"
    seconds: 2
  when: BILLING_ID is undefined

- name: Advise status BILLING_USER_EMAIL
  pause:
    echo: "Please note that CLOUD_ACCOUNT_BILLING_ADMIN_EMAIL has not been provided"
    seconds: 2
  when: BILLING_USER_EMAIL is undefined

#- name: Set Project Default
#  shell: gcloud config set project {{ PROJECT_ID }}

- block:

  - name: Obtain PROJECT_NUMBER
    shell: gcloud projects describe {{ PROJECT_ID }} --format="value(projectNumber)"  --account {{ BILLING_USER_EMAIL }}
    register: project_number

  rescue:
    - name: RESCUE - Obtain PROJECT_NUMBER
      block:

        - name: RESCUE - Enable cloud resourcemanager if not enabled
          include_role:
            name: gcp_project_services_enable
          vars:
            GCLOUD_PROJECT_SERVICES: ['cloudresourcemanager.googleapis.com']

        - name: RESCUE - Obtain PROJECT_NUMBER
          shell: gcloud projects describe {{ PROJECT_ID }} --format="value(projectNumber)" --account {{ BILLING_USER_EMAIL }}
          register: project_number

      when: project_number.stderr is search('cloudresourcemanager.googleapis.com') and project_number.stderr is search('not enabled on project')

- name: Cache PROJECT_NUMBER
  set_fact:
    cacheable: yes
    PROJECT_NUMBER: "{{ project_number.stdout }}"

- name: Assert folder exists
  file:
    path: "{{ WORK_DIR }}"
    state: directory

- name: Store PROJECT_NUMBER
  copy:
    content: "{{ PROJECT_NUMBER }}"
    dest: "{{ WORK_DIR }}/project_number.txt"
