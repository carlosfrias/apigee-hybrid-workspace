---
# tasks file for gcp_iam_service_account_mgmt
- name: Assert that the ADMIN_ACCOUNT_EMAIL is available
  assert:
    that:
      - ADMIN_ACCOUNT_EMAIL is defined
    msg: "Please provide the ADMIN_ACCOUNT_EMAIL"

- name: Assert that the ADMIN_SERVICE_ACCOUNT_NAME is available
  assert:
    that:
      - ADMIN_SERVICE_ACCOUNT_NAME is defined
    msg: "Please provide the ADMIN_SERVICE_ACCOUNT_NAME"

- name: Assert that the PROJECT_ID is available
  assert:
    that:
      - PROJECT_ID is defined
    msg: "Please provide the PROJECT_ID"

- name: Assert that SERVICE_OP is indicated
  assert:
    that:
      - SERVICE_OP is defined
    msg: "Please indicate the SERVICE_OP, should be either 'create' or 'delete'"

- name: Query for ACTIVE projects list
  command: gcloud projects list --account {{ ADMIN_ACCOUNT_EMAIL }} --filter='project_id={{ PROJECT_ID }}' --format=yaml
  register: ACTIVE_PROJECTS

- name: Show ACTIVE projects query result
  debug:
    var: ACTIVE_PROJECTS

- name: Format ACTIVE_PROJECTS results
  set_fact:
    ACTIVE_PROJECTS: "{{ ACTIVE_PROJECTS.stdout | from_yaml }}"
  when: "ACTIVE_PROJECTS.stdout is defined"

- name: Assert project ACTIVE state
  set_fact:
    cacheable: true
    PROJECT_ACTIVE: "{{ (ACTIVE_PROJECTS.lifecycleState is defined and ACTIVE_PROJECTS.lifecycleState == 'ACTIVE') | default(False) }}"

- block:
  - name: Create the service account
    shell: |
      gcloud iam service-accounts {{ SERVICE_OP }} {{ item }} \
        --description={{ item }} \
        --display-name={{ item }} \
        --project {{ PROJECT_ID }}
    loop: "{{ SERVICE_ACCOUNTS }}"

    register: status
    when: PROJECT_ACTIVE is truthy
    failed_when:
      - status.rc == 1
      - "'already exists' not in status.stderr"

  rescue:
    - name: RESCUE - Create an initial service account, rescue for idempotency
      shell: |
        gcloud iam service-accounts {{ SERVICE_OP }} {{ item }} \
          --description={{ item }} \
          --display-name={{ item }} \
          --project {{ PROJECT_ID }} \
          --account {{ ADMIN_ACCOUNT_EMAIL }}
      loop: "{{ SERVICE_ACCOUNTS }}"
      register: status
      when: PROJECT_ACTIVE is truthy
      failed_when:
        - status.rc == 1
        - "'already exists' not in status.stderr"

    - name: Fail if service is disabled
      fail:
        msg: "Service is disabled"
      when: status.err is defined and status.err is search("SERVICE DISABLED")
  when: SERVICE_OP == "create"

- name: Delete a service account
  shell: |
    gcloud iam service-accounts {{ SERVICE_OP }} {{ ADMIN_SERVICE_ACCOUNT_NAME }} \
      --project {{ PROJECT_ID }}
  when: SERVICE_OP == "delete"

- name: Wait for the policy bindings to propagate
  pause:
    seconds: "{{ TIME_TO_PROPAGATE_BINDINGS  | default(10) }}"
    prompt: "Wait for the policy bindings to propagate"
  when: PROJECT_ACTIVE is truthy

- name: Assert no service account created on condition
  debug:
    msg: "No service account can be created when there is no project, perhaps you need to first provision a project?"
  when: PROJECT_ACTIVE is falsy
