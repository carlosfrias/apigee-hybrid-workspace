---
# tasks file for gcp_project_create
- name: Assert ADMIN_ACCOUNT_EMAIL
  assert:
    that:
      - ADMIN_ACCOUNT_EMAIL is defined
    msg: "ADMIN_ACCOUNT_EMAIL must contain the GCP account email"

- name: Assert PROJECT_ID
  assert:
    that:
      - PROJECT_ID is defined
    msg: "PROJECT_ID must be provided."

- name: Advise status BILLING_ID
  pause:
    echo: "Please note that BILLING_ID has not been provided"
    seconds: 2
  when: BILLING_ID is undefined

- name: Advise status BILLING_USER_EMAIL
  pause:
    echo: "Please note that CLOUD_ACCOUNT_BILLING_ADMIN_EMAIL has not been provided"
    seconds: 2
  when: BILLING_USER_EMAIL is undefined

- name: Query for deleted projects list
  shell: gcloud projects list --account {{ ADMIN_ACCOUNT_EMAIL }}
  register: PROJECTS_LISTED

- name: Assert project deleted state
  set_fact:
    cacheable: true
    PROJECT_FOUND: "{{ PROJECTS_LISTED.stdout is search(PROJECT_ID) }}"

- name: Create project if PROJECT_FOUND is not true
  block:

  - name: Construct base project create command
    set_fact:
      cacheable: yes
      GCLOUD_PROJECT_CREATE_CMD: "gcloud projects create {{ PROJECT_ID }} --account {{ ADMIN_ACCOUNT_EMAIL }}"

  - name: Add GCLOUD_ORG_ID if provided to base project create command
    set_fact:
      cacheable: yes
      GCLOUD_PROJECT_CREATE_CMD: "{{ GCLOUD_PROJECT_CREATE_CMD }} --organization {{ GCLOUD_ORG_ID }}"
    when: GCLOUD_ORG_ID is defined and FOLDER_ID is not defined

  - name: Add FOLDER_ID if provided to base project create command
    set_fact:
      cacheable: yes
      GCLOUD_PROJECT_CREATE_CMD: "{{ GCLOUD_PROJECT_CREATE_CMD }} --folder {{ FOLDER_ID }}"
    when: FOLDER_ID is defined

  - name: Create GCP Project with provided FOLDER_ID
    shell: "{{ GCLOUD_PROJECT_CREATE_CMD }}"
    register: status
    failed_when:
    - status.rc == 1
    - "'already in use' not in status.stderr"
    - "'Project IDs must be between 6 and 30 characters' in status.stderror"
  when: PROJECT_FOUND is falsy

- name: Fail the invocation to create a project that has been deleted
  debug:
    msg: "The project already exists and will not be recreated"
  when: PROJECT_FOUND is truthy

- name: Connect GCP Project to Billing Account, if provided
  ignore_errors: true
  shell: gcloud alpha billing projects link {{ PROJECT_ID }} --billing-account {{ BILLING_ID }} --account {{ BILLING_USER_EMAIL }}
  when: BILLING_ID is defined and BILLING_USER_EMAIL is defined

- name: Set Project Default
  shell: gcloud config set project {{ PROJECT_ID }}

#- block:
#
#  - name: Obtain PROJECT_NUMBER
#    shell: gcloud projects describe {{ PROJECT_ID }} --format="value(projectNumber)" --account {{ BILLING_USER_EMAIL }}
#    register: project_number
#
#  rescue:
#    - name: RESCUE - Obtain PROJECT_NUMBER
#      block:
#
#        - name: RESCUE - Enable cloud resourcemanager if not enabled
#          include_role:
#            name: gcp_project_services_enable
#          vars:
#            GCLOUD_PROJECT_SERVICES: ['cloudresourcemanager.googleapis.com']
#
#        - name: RESCUE - Obtain PROJECT_NUMBER
#          shell: gcloud projects describe {{ PROJECT_ID }} --format="value(projectNumber)" --account {{ BILLING_USER_EMAIL }}
#          register: project_number
#
#      when: project_number.stderr is search('cloudresourcemanager.googleapis.com') and project_number.stderr is search('not enabled on project')
#
#- name: Cache PROJECT_NUMBER
#  set_fact:
#    cacheable: yes
#    PROJECT_NUMBER: "{{ project_number.stdout }}"
#
#- name: Store PROJECT_NUMBER
#  copy:
#    content: "{{ PROJECT_NUMBER }}"
#    dest: "{{ WORK_DIR }}/project_number.txt"

- name: capture Project number
  import_role:
    name: gcp_project_number_get
