---
- name: Create Apigee runtime on GCP
  hosts: localhost
  connection: local

  vars_files:
  - ~/.apigee-secure/apigee-hybrid-sensitive-attributes.yml
  - "{{ playbook_dir | dirname }}/shared/attributes.yml"


  collections:
  - bap_coe.bootstrap_runtime
  - bap_coe.gcp_management

  roles:
    - { role: terraform_installer }
    - { role: service_account_file_path }
    - { role: service_account_file_processing }
    - { role: gcp_auth_service_account_activate }

  tasks:
  - name: Assert terraform log folder exists
    file:
      path: "{{ TERRAFORM_LOG_PATH }}"
      state: directory

  - name: Assert terraform log file exists
    file:
      path: "{{ item }}"
      state: touch
    with_items:
      - "{{ TERRAFORM_LOG_FILE_NAME_INIT_PATH }}"
      - "{{ TERRAFORM_LOG_FILE_NAME_PLAN_PATH }}"
      - "{{ TERRAFORM_LOG_FILE_NAME_APPLY_PATH }}"
      - "{{ TERRAFORM_LOG_FILE_NAME_DESTROY_PATH }}"

  - name: Terraform init
    shell: |
      {{ TERRAFORM_PATH_BIN }} init
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TF_LOG: "{{ TERRAFORM_LOG }}"
      TF_LOG_PATH: "{{ TERRAFORM_LOG_FILE_NAME_INIT_PATH }}"

  - name: Terraform plan
    shell: |
      {{ TERRAFORM_PATH_BIN }} plan --var-file={{ TERRAFORM_VAR_FILE_PATH }}
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TF_LOG: "{{ TERRAFORM_LOG }}"
      TF_LOG_PATH: "{{ TERRAFORM_LOG_FILE_NAME_PLAN_PATH }}"

  - name: Terraform apply
    shell: |
      {{ TERRAFORM_PATH_BIN }} apply --var-file={{ TERRAFORM_VAR_FILE_PATH }} -auto-approve
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TF_LOG: "{{ TERRAFORM_LOG }}"
      TF_LOG_PATH: "{{ TERRAFORM_LOG_FILE_NAME_APPLY_PATH }}"

