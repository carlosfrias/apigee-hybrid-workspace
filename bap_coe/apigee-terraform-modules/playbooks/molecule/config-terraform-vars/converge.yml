---
- name: Create Apigee runtime on GCP
  hosts: localhost
  connection: local

  vars_files:
  - ~/.apigee-secure/apigee-hybrid-sensitive-attributes.yml
  - "{{ playbook_dir | dirname | dirname }}/attributes.yml"

  collections:
  - bap_coe.bootstrap_runtime
  - bap_coe.gcp_management

  vars:
    peering_range: "10.0.0.0/22"
    support_range: "10.1.0.0/28"
    key_value_pairs:
    - { key: "project_id", value: '"{{ PROJECT_ID }}"', separator: "=", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: "euw1-instance", value: 'use1-instance', separator: "", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: '"europe-west1"', value: '"{{ GCP_REGION }}"', separator: "", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: "ax_region", value: '"{{ GCP_REGION }}"', separator: "=", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: "apigee_environments", value: '["test1", "test2"]', separator: "=", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: "peering_range", value: '"{{ peering_range }}"', separator: "=", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: "support_range", value: '"{{ support_range }}"', separator: "=", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: '"backend-euw1"', value: '"backend-use1"', separator: "", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: '"psc-nat-euw1"', value: '"psc-nat-use1"', separator: "", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }
    - { key: '"europe-west1"', value: '"us-east1"', separator: "", type: "arg", file_name: "{{ TERRAFORM_PATH_PROJECT }}/x-demo.tfvars" }

  roles:
  - { role: terraform_installer }
  - { role: key_value_updates }

  pre_tasks:
  - name: Clone apigee/terraform-modules github repo
    git:
      repo: "{{ GITHUB_REPO_URL }}"
      dest: "{{ GITHUB_REPO_DEST }}"
      accept_hostkey: yes
      update: no
      clone: yes
      force: no

  - name: Assert files is in place
    file:
      path: "{{ item.file_name }}"
      state: touch
    with_items: "{{ key_value_pairs }}"

  - name: Backup original files
    copy:
      src: "{{ item.file_name }}"
      dest: "{{ item.file_name }}.original"
      force: yes
    with_items: "{{ key_value_pairs }}"
