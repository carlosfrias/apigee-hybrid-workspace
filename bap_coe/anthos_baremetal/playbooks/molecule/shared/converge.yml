---
- name: Create Apigee runtime on GCP
  hosts: localhost
  connection: local

  vars_files:
  - ~/.apigee-secure/apigee-hybrid-sensitive-attributes.yml
  - "{{ playbook_dir | dirname }}/shared/attributes.yml"

  collections:
  - bap_coe.bootstrap_runtime
  - bap_coe.gcp_management

  roles:
  - { role: terraform_installer }
  - { role: service_account_file_path,
      KEY_FILE_PATH: "{{ CREDENTIALS_DIR }}"
    }

  - { role: terraform_credentials }
  - { role: key_value_updates }

  pre_tasks:
  - name: Clone apigee/terraform-modules github repo
    git:
      repo: "{{ GITHUB_REPO_URL }}"
      dest: "{{ GITHUB_REPO_DEST }}"
      accept_hostkey: yes
      update: no
      clone: yes
      force: no

  - name: Copy .tfvars.sample file
    copy:
      src: "{{ TERRAFORM_PATH_PROJECT }}/terraform.tfvars.sample"
      dest: "{{ TERRAFORM_PATH_PROJECT }}/terraform.tfvars"
      remote_src: no

  tasks:
  - name: Assert terraform log folder exists
    file:
      path: "{{ TERRAFORM_LOG_PATH }}"
      state: directory

  - name: Terraform init
    shell: |
      {{ TERRAFORM_PATH_BIN }} init
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TERRAFORM_LOG: "{{ TERRAFORM_LOG }}"
      TERRAFORM_LOG_PATH: "{{ TERRAFORM_LOG_PATH }}/{{ TERRAFORM_LOG_FILE_NAME }}"

  - name: Terraform plan
    shell: |
      {{ TERRAFORM_PATH_BIN }} plan
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TERRAFORM_LOG: "{{ TERRAFORM_LOG }}"
      TERRAFORM_LOG_PATH: "{{ TERRAFORM_LOG_PATH }}/{{ TERRAFORM_LOG_FILE_NAME }}"

  - name: Terraform apply
    shell: |
      {{ TERRAFORM_PATH_BIN }} apply -auto-approve
    args:
      chdir: "{{ TERRAFORM_PATH_PROJECT }}"
    environment:
      TERRAFORM_LOG: "{{ TERRAFORM_LOG }}"
      TERRAFORM_LOG_PATH: "{{ TERRAFORM_LOG_PATH }}/{{ TERRAFORM_LOG_FILE_NAME }}"

