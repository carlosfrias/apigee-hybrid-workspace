---
# tasks file for products_create
- name: Clear any host errors
  meta: clear_host_errors

- name: Assert GCLOUD_TOKEN is provided
  assert:
    that:
      - GCLOUD_TOKEN is defined
    msg: Please provide the bearer token from gcloud. (You can use gcp_token_retrieval role)

- name: Assert API_KEY is provided
  assert:
    that:
      - API_KEY is defined
    msg: Please provide the API_KEY. (https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts/create)

- name: Assert ORG is provided
  assert:
    that:
      - ORG is defined
    msg: Please provide the organiztion name.

- name: Set defaults for attributes not provided
  set_fact:
    PRODUCT_NAME: "{{ PRODUCT_NAME | default('Sample-Product') }}"
    PRODUCT_DISPLAY_NAME: "{{ PRODUCT_DISPLAY_NAME | default('Sample-Product') }}"
    PRODUCT_APPROVAL_TYPE: "{{ PRODUCT_APPROVAL_TYPE | default('auto') }}"
    PRODUCT_ENV: "{{ PRODUCT_ENV }}"
    API_PROXY_NAME: "{{ API_PROXY_NAME }}"
    PRODUCT_QUOTA: "{{ PRODUCT_QUOTA | string }}"
    PRODUCT_QUOTA_INTERVAL: "{{ PRODUCT_QUOTA_INTERVAL | string }}"
    PRODUCT_QUOTA_TIME_UNIT: "{{ PRODUCT_QUOTA_TIME_UNIT }}"
    START_POSITION: "{{ LOAD_PRODUCT_START_POSITION }}"
    LOAD_COUNT: "{{ LOAD_PRODUCT_COUNT }}"

#  Create Product - https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts/create
- name: Create Product
  uri:
    url: "{{ APIGEE_API_URI | default('https://apigee.googleapis.com') }}/v1/organizations/{{ ORG }}/apiproducts?key={{ API_KEY }}"
    method: POST
    status_code: ['200','201','409']
    headers:
      Authorization: Bearer {{ GCLOUD_TOKEN }}
    body_format: json
    body:
      name: "{{ PRODUCT_NAME }}-{{ item }}"
      displayName: "{{ PRODUCT_DISPLAY_NAME }}"
      approvalType: "{{ PRODUCT_APPROVAL_TYPE }}"
      environments: [
          "{{ PRODUCT_ENV }}"
      ]
      proxies: [
          "{{ API_PROXY_NAME }}"
      ]
      quota: "{{ PRODUCT_QUOTA }}"
      quotaInterval: "{{ PRODUCT_QUOTA_INTERVAL }}"
      quotaTimeUnit: "{{ PRODUCT_QUOTA_TIME_UNIT }}"
  with_sequence: "start={{ START_POSITION }} end={{ LOAD_COUNT }}"
#  async: 3600
#  poll: 0
#  register: product_creation_task_status