---
# tasks file for developers_create
- name: Clear any host errors
  meta: clear_host_errors

- name: Assert GCLOUD_TOKEN is provided
  assert:
    that:
      - GCLOUD_TOKEN is defined
    msg: Please provide the bearer token from gcloud. (You can use gcp_token_retrieval role)

- name: Assert ORG is provided
  assert:
    that:
      - ORG is defined
    msg: Please provide the organiztion name.

- name: Set defaults for attributes not provided
  set_fact:
    APIGEE_API_URI: "{{ APIGEE_API_URI | default('https://apigee.googleapis.com') }}"
    DEVELOPER_EMAIL_ACCOUNT: "{{ DEVELOPER_EMAIL_ACCOUNT | default('joe.developer') }}"
    DEVELOPER_EMAIL_DOMAIN: "{{ DEVELOPER_EMAIL_DOMAIN | default('google.com') }}"
    DEVELOPER_FIRST_NAME: "{{ DEVELOPER_FIRST_NAME | default('joe') }}"
    DEVELOPER_LAST_NAME: "{{ DEVELOPER_LAST_NAME | default('developer') }}"
    DEVELOPER_USER_NAME: "{{ DEVELOPER_USER_NAME | default('developerjoe') }}"
    START_POSITION: "{{ LOAD_DEVELOPER_START_POSITION | default(1) }}"
    LOAD_COUNT: "{{ LOAD_DEVELOPER_COUNT | default(1) }}"

# Create Developer - https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.developers/create
- name: Create Developers
  uri:
    url: "{{ APIGEE_API_URI }}/v1/organizations/{{ ORG }}/developers"
    method: POST
    status_code: [ '200','201','409']
    headers:
      Authorization: Bearer {{ GCLOUD_TOKEN }}
    body_format: json
    body:
      email: "{{ DEVELOPER_EMAIL_ACCOUNT }}-{{ item }}@{{ DEVELOPER_EMAIL_DOMAIN }}"
      firstName: "{{ DEVELOPER_FIRST_NAME }}-{{ item }}"
      lastName: "{{ DEVELOPER_LAST_NAME }}"
      userName: "{{ DEVELOPER_USER_NAME }}-{{ item }}"
  with_sequence: "start={{ START_POSITION }} end={{ LOAD_COUNT }}"
#  async: 3600
#  poll: 0
#  register: dev_creation_task_status
#
#- name: Resync after creation of sample developers
#  async_status:
#    jid: "{{ dev_creation_task_status_item.ansible_job_id }}"
#  loop: "{{ dev_creation_task_status.results }}"
#  loop_control:
#    loop_var: "dev_creation_task_status_item"
#  register: dev_creator_task_result
#  until: dev_creator_task_result.finished
#  retries: "{{ (LOAD_COUNT | int / 4 | int) | int }}"
#  delay: 60
